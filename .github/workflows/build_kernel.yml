name: Build Exynos 850 Kernel for Galaxy A21s

on:
  push:
    branches:
      - master  # or 'main' if that's your default branch
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: master  # Ensure you're using the correct branch (e.g., 'master')

      # Step 2: Install necessary build dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            git \
            gcc \
            g++ \
            make \
            python3 \
            libncurses5-dev \
            libncursesw5-dev \
            bison \
            flex \
            libssl-dev \
            ccache \
            curl \
            libelf-dev \
            wget \
            unzip

      # Step 3: Download and set up Android NDK (r25b version for kernel builds)
      - name: Set up Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip android-ndk-r25b-linux.zip
          export NDK_HOME=$PWD/android-ndk-r25b
          export PATH=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH

      # Step 4: Download and set up the aarch64-linux-android toolchain
      - name: Set up aarch64-linux-android Toolchain
        run: |
          wget https://releases.linaro.org/components/toolchain/binaries/latest/aarch64-linux-gnu/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
          tar -xf gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu.tar.xz
          export CROSS_COMPILE=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-
          export PATH=$PWD/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH

      # Step 5: Configure Kernel using the correct defconfig for Galaxy A21s
      - name: Configure Kernel
        run: |
          cd $GITHUB_WORKSPACE
          make ARCH=arm64 exynos850-a21snsxx_defconfig  # Correct defconfig for A21s

      # Step 6: Build the Kernel using the Clang toolchain (android-ndk-r25b)
      - name: Build Kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-android- -j$(nproc)

      # Step 7: Create Boot Image (optional, but typical in kernel builds)
      - name: Create Boot Image
        run: |
          mkbootimg --kernel arch/arm64/boot/Image.gz --ramdisk ramdisk.img --cmdline "console=ttyS0,115200n8" -o boot.img

      # Step 8: Upload the Boot Image as an artifact (for downloading after the build)
      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: boot.img
